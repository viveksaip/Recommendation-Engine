# -*- coding: utf-8 -*-
"""recommendation engine

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KSkJHbZZFXm-BpGTIpr1NghOUZF-nN8o
"""

from google.colab import drive
drive.mount('/content/drive')

rootpath = '/content/drive/My Drive/colab datasets/others'

import os
os.chdir(rootpath)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pandas import DataFrame 
import nltk

from sklearn.neighbors import NearestNeighbors
from sklearn.linear_model import LogisticRegression
from sklearn import neighbors
from scipy.spatial.distance import cosine
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.feature_selection import SelectKBest
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer

import re
import string
from wordcloud import WordCloud, STOPWORDS
from sklearn.metrics import mean_squared_error

df = pd.read_csv('Amazon food reviews.csv')

df.head(3)

df.columns

''''
[u'asin', u'overall', u'reviewText', u'reviewTime', u'reviewerID',
       u'reviewerName', u'summary', u'unixReviewTime', u'HelpfulnessNumerator',
       u'HelpfulnessDenominator']
'''

new_df = df.rename(columns = {"ProductId":"asin","UserId":"reviewerID","ProfileName":"reviewerName","Score":"overall","Time":"reviewTime","Summary":"summary","Text":"reviewText"})

new_df.columns

df = new_df

#len(df)

#see = df.groupby('asin')['Id'].nunique()

#see.head(44)

#used for merging with df
count = df.groupby("asin", as_index=False).count()

len(count)

count.head(7)

mean = df.groupby("asin", as_index=False).mean()

len(mean)

#Merging two data frames based on 'asin'=='Prodct id'
dfMerged = pd.merge(df, count, how='right', on=['asin'])

dfMerged.head(3)

#rename column
dfMerged["totalReviewers"] = dfMerged["reviewerID_y"] #reviewerID_y - gives me count
dfMerged["overallScore"] = dfMerged["overall_x"]
dfMerged["summaryReview"] = dfMerged["summary_x"]

dfNew = dfMerged[['asin','summaryReview','overallScore',"totalReviewers"]]

dfNew.head(7)

dfMerged.columns

dfMerged = dfMerged.sort_values(by='totalReviewers', ascending=False)

dfMerged.head(7)

len(dfMerged)

dfCount = dfMerged[dfMerged.totalReviewers >= 100]
#dfCount

len(dfCount)

dfCount.head(3)

df.columns

dfProductReview = df.groupby("asin", as_index=False).mean()

dfProductReview.head(3)

ProductReviewSummary = dfCount.groupby("asin")["summaryReview"].apply(list)

ProductReviewSummary.head(3)

ProductReviewSummary = pd.DataFrame(ProductReviewSummary)
#ProductReviewSummary.to_csv("ProductReviewSummary.csv")

ProductReviewSummary.head(3)

df3 = pd.read_csv("ProductReviewSummary.csv")
df3 = pd.merge(df3, dfProductReview, on="asin", how='inner')

df3.head(3)

df3 = df3[['asin','summaryReview','overall']] #v# taking mean of all scores

df3.head(3)

len(df3)

#function for tokenizing summary
regEx = re.compile('[^a-z]+')
def cleanReviews(reviewText):
    reviewText = reviewText.lower()
    reviewText = regEx.sub(' ', reviewText).strip()
    return reviewText

#reset index and drop duplicate rows
df3["summaryClean"] = df3["summaryReview"].apply(cleanReviews)

df3.head(3)

df3 = df3.drop_duplicates(['overall'], keep='last')

df3.head(2)

df3 = df3.reset_index()

df3.head(2)

reviews = df3["summaryClean"]  #v# have cleaned summary of reviews

reviews.head(3)

countVector = CountVectorizer(max_features = 300, stop_words='english')

transformedReviews = countVector.fit_transform(reviews) #v# take each word and assign a number to it. (order is random)

transformedReviews

dfReviews = DataFrame(transformedReviews.A, columns=countVector.get_feature_names())

dfReviews.head(2)

dfReviews = dfReviews.astype(int)

dfReviews.head()

#save 
#dfReviews.to_csv("dfReviews.csv")

# First let's create a dataset called X
X = np.array(dfReviews)

X

type(X)

X.shape

# create train and test
tpercent = 0.9
tsize = int(np.floor(tpercent * len(dfReviews)))

tsize

dfReviews_train = X[:tsize]
dfReviews_test = X[tsize:]

#len of train and test
lentrain = len(dfReviews_train)
lentest = len(dfReviews_test)

# KNN classifier to find similar products
print(lentrain)
print(lentest)

dfReviews_train

#model
neighbor = NearestNeighbors(n_neighbors=3, algorithm='ball_tree').fit(dfReviews_train)

# Let's find the k-neighbors of each point in object X. To do that we call the kneighbors() function on object X.
distances, indices = neighbor.kneighbors(dfReviews_train)

distances[0]

len(distances)

indices[0]

len(indices)

dfReviews_test[0]

#find most related products
for i in range(lentest):
    a = neighbor.kneighbors([dfReviews_test[i]])
    related_product_list = a[1]

    first_related_product = [item[0] for item in related_product_list]
    first_related_product = str(first_related_product).strip('[]')
    first_related_product = int(first_related_product)
    second_related_product = [item[1] for item in related_product_list]
    second_related_product = str(second_related_product).strip('[]')
    second_related_product = int(second_related_product)
    
    print ("Based on product reviews, for ", df3["asin"][lentrain + i] ," average rating is ",df3["overall"][lentrain + i])
    print ("The first similar product is ", df3["asin"][first_related_product] ," average rating is ",df3["overall"][first_related_product])
    print ("The second similar product is ", df3["asin"][second_related_product] ," average rating is ",df3["overall"][second_related_product])
    print ("-----------------------------------------------------------")

a = neighbor.kneighbors([dfReviews_test[0]])

a

a[1] #v# here kneighbours predict that 'product 324' related products are products 98,323,4

related_product_list = a[1]

related_product_list

first_related_product = [item[0] for item in related_product_list]

first_related_product

first_related_product = str(first_related_product).strip('[]')

first_related_product

first_related_product = int(first_related_product)

first_related_product

second_related_product = [item[1] for item in related_product_list]
    second_related_product = str(second_related_product).strip('[]')
    second_related_product = int(second_related_product)

second_related_product

lentrain

print ("Based on product reviews, for ", df3["asin"][lentrain + 0] ," average rating is ",df3["overall"][lentrain + 0])

print ("The first similar product is ", df3["asin"][first_related_product] ," average rating is ",df3["overall"][first_related_product]) #first_related_product = 98

print ("The second similar product is ", df3["asin"][second_related_product] ," average rating is ",df3["overall"][second_related_product])

